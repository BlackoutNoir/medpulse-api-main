"""complete model migration

Revision ID: e36a0ba03581
Revises: ccb6d1e6b690
Create Date: 2024-11-16 23:14:33.769178

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e36a0ba03581'
down_revision: Union[str, None] = 'ccb6d1e6b690'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('allergy',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('diagnosis',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('medication',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('company', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('stock', sa.Integer(), nullable=False),
    sa.Column('standard_dose', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('form', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('route', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('active_ingredients', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('chat_participant',
    sa.Column('chat_uid', sa.Uuid(), nullable=False),
    sa.Column('user_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['chat_uid'], ['chat.uid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_uid'], ['medpulse_user.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('chat_uid', 'user_uid')
    )
    op.create_table('patient',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('user_uid', sa.Uuid(), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['user_uid'], ['medpulse_user.uid'], ),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('user_uid')
    )
    op.create_table('bill',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('payed', sa.Boolean(), nullable=False),
    sa.Column('date_issued', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('patient_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['patient_uid'], ['patient.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('doctor',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('staff_uid', sa.Uuid(), nullable=False),
    sa.Column('specializations', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('qualifications', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('years_of_experience', sa.Integer(), nullable=False),
    sa.Column('enable_online_appointments', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['staff_uid'], ['staff.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('insurance',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('company', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('details', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('policy_no', sa.Integer(), nullable=False),
    sa.Column('patient_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['patient_uid'], ['patient.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('patient_uid')
    )
    op.create_table('medical_history',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('blood_type', sa.Enum('A_POSITIVE', 'A_NEGATIVE', 'B_POSITIVE', 'B_NEGATIVE', 'AB_POSITIVE', 'AB_NEGATIVE', 'O_POSITIVE', 'O_NEGATIVE', name='blood_type'), nullable=True),
    sa.Column('height', sa.Float(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('patient_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['patient_uid'], ['patient.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('patient_uid')
    )
    op.create_table('appointment',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=False),
    sa.Column('is_checked_in', sa.Boolean(), nullable=False),
    sa.Column('status', sa.Enum('SCHEDULED', 'COMPLETED', 'CANCELLED', 'NO_SHOW', 'PENDING', name='appointment_status_type'), nullable=False),
    sa.Column('reason_for_visit', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('location', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_virtual', sa.Boolean(), nullable=False),
    sa.Column('details', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('patient_uid', sa.Uuid(), nullable=False),
    sa.Column('doctor_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['doctor_uid'], ['doctor.uid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['patient_uid'], ['patient.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('lab_test',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('date_issued', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('date_performed', sa.DateTime(), nullable=True),
    sa.Column('test_status', sa.Enum('PENDING', 'PREFORMED', 'COMPLETED', 'CANCELLED', name='lab_test_status'), nullable=False),
    sa.Column('test_type', sa.Enum('BLOOD_TEST', 'URINE_TEST', 'XRAY', 'MRI', name='lab_test_type'), nullable=False),
    sa.Column('patient_uid', sa.Uuid(), nullable=False),
    sa.Column('doctor_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['doctor_uid'], ['doctor.uid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['patient_uid'], ['patient.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('medical_history_allergies',
    sa.Column('medical_history_uid', sa.Uuid(), nullable=False),
    sa.Column('allergy_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['allergy_uid'], ['allergy.uid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['medical_history_uid'], ['medical_history.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('medical_history_uid', 'allergy_uid')
    )
    op.create_table('medical_history_diagnosis',
    sa.Column('medical_history_uid', sa.Uuid(), nullable=False),
    sa.Column('diagnosis_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['diagnosis_uid'], ['diagnosis.uid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['medical_history_uid'], ['medical_history.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('medical_history_uid', 'diagnosis_uid')
    )
    op.create_table('medical_history_medications',
    sa.Column('medical_history_uid', sa.Uuid(), nullable=False),
    sa.Column('medication_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['medical_history_uid'], ['medical_history.uid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['medication_uid'], ['medication.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('medical_history_uid', 'medication_uid')
    )
    op.create_table('payment',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('amount_paid', sa.Float(), nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('status', sa.Enum('PAYED', 'UNPAYED', 'PENDING', name='payment_status_type'), nullable=False),
    sa.Column('transaction_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bill_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['bill_uid'], ['bill.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('prescription',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('date_prescribed', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('order_status', sa.Enum('PENDING', 'READY', 'NOT_ACTIVE', name='order_status_type'), nullable=False),
    sa.Column('patient_uid', sa.Uuid(), nullable=False),
    sa.Column('doctor_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['doctor_uid'], ['doctor.uid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['patient_uid'], ['patient.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('lab_result',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('parameter', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('value', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('unit', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('file_attachment', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('test_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['test_uid'], ['lab_test.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('prescribed_medication',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('dosage', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('quantity', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('frequency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('duration', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('instruction_details', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('prescription_uid', sa.Uuid(), nullable=False),
    sa.Column('medication_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['medication_uid'], ['medication.uid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['prescription_uid'], ['prescription.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('treatment',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('cost', sa.Float(), nullable=False),
    sa.Column('discount', sa.Float(), nullable=True),
    sa.Column('type', sa.Enum('APPOINTMENT', 'PRESCRIPTION', 'LABTEST', 'OTHER', name='treatment_type'), nullable=False),
    sa.Column('insured_status', sa.Enum('PENDING', 'ACCEPTED', 'REJECTED', 'NOT_COVERED', name='insured_status_type'), nullable=False),
    sa.Column('bill_uid', sa.Uuid(), nullable=False),
    sa.Column('appointment_uid', sa.Uuid(), nullable=True),
    sa.Column('prescription_uid', sa.Uuid(), nullable=True),
    sa.Column('labtest_uid', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['appointment_uid'], ['appointment.uid'], ),
    sa.ForeignKeyConstraint(['bill_uid'], ['bill.uid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['labtest_uid'], ['lab_test.uid'], ),
    sa.ForeignKeyConstraint(['prescription_uid'], ['prescription.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.drop_table('chatparticipant')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('chatparticipant',
    sa.Column('chat_uid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_uid', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['chat_uid'], ['chat.uid'], name='chatparticipant_chat_uid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_uid'], ['medpulse_user.uid'], name='chatparticipant_user_uid_fkey', ondelete='CASCADE')
    )
    op.drop_table('treatment')
    op.drop_table('prescribed_medication')
    op.drop_table('lab_result')
    op.drop_table('prescription')
    op.drop_table('payment')
    op.drop_table('medical_history_medications')
    op.drop_table('medical_history_diagnosis')
    op.drop_table('medical_history_allergies')
    op.drop_table('lab_test')
    op.drop_table('appointment')
    op.drop_table('medical_history')
    op.drop_table('insurance')
    op.drop_table('doctor')
    op.drop_table('bill')
    op.drop_table('patient')
    op.drop_table('chat_participant')
    op.drop_table('medication')
    op.drop_table('diagnosis')
    op.drop_table('allergy')
    # ### end Alembic commands ###
